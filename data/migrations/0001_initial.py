# Generated by Django 2.1 on 2021-01-06 06:08

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('grout', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='BulkUploadDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(blank=True, max_length=100, null=True)),
                ('file_status', models.CharField(choices=[('PENDING', 'PENDING'), ('COMPLETED', 'COMPLETED'), ('ERROR', 'ERROR')], default='PENDING', max_length=30)),
                ('csv_uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('record_type', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CrashDiagramOrientation',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('crash_type', models.CharField(blank=True, max_length=150, null=True)),
                ('movement_code', models.CharField(blank=True, error_messages={'unique': 'A movement_code already exists.'}, max_length=50, null=True, unique=True)),
                ('image', django.contrib.postgres.fields.jsonb.JSONField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DedupeJob',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('STARTED', 'Started'), ('SUCCESS', 'Success'), ('ERROR', 'Error')], default='PENDING', max_length=8)),
                ('celery_task', models.UUIDField(null=True)),
            ],
            options={
                'get_latest_by': 'datetime',
            },
        ),
        migrations.CreateModel(
            name='DriverRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='grout.Record')),
                ('weather', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('light', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('city_district', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=50, null=True)),
                ('road', models.CharField(blank=True, max_length=200, null=True)),
                ('state', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('merged_and_updated', models.BooleanField(default=False)),
                ('merged_uuid', models.CharField(blank=True, max_length=500, null=True)),
                ('uploaded_from', models.CharField(choices=[('Web', 'Web'), ('iOS', 'iOS'), ('Android', 'Android'), ('bulk_upload', 'bulk_upload')], default='Web', max_length=15)),
            ],
            options={
                'abstract': False,
            },
            bases=('grout.record',),
        ),
        migrations.CreateModel(
            name='DriverRecordCopy',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='grout.Record')),
                ('weather', models.CharField(blank=True, max_length=50, null=True)),
                ('light', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('city_district', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=50, null=True)),
                ('road', models.CharField(blank=True, max_length=200, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('uploaded_from', models.CharField(choices=[('Web', 'Web'), ('iOS', 'iOS'), ('Android', 'Android'), ('bulk_upload', 'bulk_upload')], default='Web', max_length=15)),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.DriverRecord')),
            ],
            options={
                'abstract': False,
            },
            bases=('grout.record',),
        ),
        migrations.CreateModel(
            name='DuplicateDistanceConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dedupe_distance_threshold', models.FloatField(default=0.0008)),
                ('unit', models.CharField(blank=True, max_length=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='IrapDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('irap_treatment_id', models.IntegerField(default=1000)),
                ('irap_treatment_name', models.CharField(max_length=200)),
                ('path', models.URLField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecordAuditLogEntry',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(db_index=True, max_length=100)),
                ('record_uuid', models.CharField(db_index=True, max_length=100)),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], max_length=50)),
                ('log', models.TextField(null=True)),
                ('signature', models.CharField(max_length=100, null=True)),
                ('record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.DriverRecord')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecordCostConfig',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('content_type_key', models.TextField()),
                ('property_key', models.TextField()),
                ('cost_prefix', models.CharField(blank=True, max_length=6, null=True)),
                ('cost_suffix', models.CharField(blank=True, max_length=6, null=True)),
                ('enum_costs', django.contrib.postgres.fields.hstore.HStoreField()),
                ('record_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='grout.RecordType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecordDuplicate',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField(default=0)),
                ('resolved', models.BooleanField(default=False)),
                ('potential_duplicates', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, null=True, size=None)),
                ('duplicate_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duplicate_record', to='data.DriverRecord')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.DedupeJob')),
                ('record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='record', to='data.DriverRecord')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WeatherDataList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('value', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='WeatherInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_name', models.CharField(blank=True, max_length=100, null=True)),
                ('client_id', models.CharField(max_length=100, null=True)),
                ('client_secret', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
        ),
    ]
