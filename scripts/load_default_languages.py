#!/usr/bin/env python

"""Loads incidents from multiple incident database dumps (schema v3)"""
import logging
import requests
import argparse

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()


def add_admin_lang(api, headers=None):
    """Create a recordtype/schema into which to load all new objects"""
    # Create record type
    response = requests.post(api + '/language-details/',
                             data={'label': 'English',
                                   'upload_for': 'admin_panel',
                                   'language_code': 'en',
                                   'csv_f': "data:text/csv;base64,",
                                   'default_for_admin_panel': True,
                                   'default_for_user_panel': False},
                             headers=headers)
    response.raise_for_status()
    logger.info('Language added for Admin Panel')

    response = requests.post(api + '/language-details/',
                             data={'label': 'English',
                                   'upload_for': 'user_panel',
                                   'language_code': 'en',
                                   'csv_f': "data:text/csv;base64,",
                                   'default_for_admin_panel': False,
                                   'default_for_user_panel': True},
                             headers=headers)
    response.raise_for_status()
    logger.info('Language added for User Panel')


def main():
    parser = argparse.ArgumentParser(description='Load Default languages')
    parser.add_argument('--api-url', help='API host / path to target for loading data',
                        default='http://127.0.0.1/api')
    parser.add_argument('--authz', help='Authorization header',
                        default='Token 36df3ade778ca4fcf66ba998506bdefa54fdff1c')
    args = parser.parse_args()

    headers = None

    if args.authz:
        headers = {'Authorization': args.authz}

    if args.authz:
        headers = {'Authorization': args.authz}

    add_admin_lang(args.api_url, headers)


if __name__ == '__main__':
    main()
